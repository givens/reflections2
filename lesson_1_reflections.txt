Udacity Lesson 1
================

How did viewing a diff between two versions of a file help you see the bug that was introduced?

It focused my attention on the lines where the differences occurred.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It would allow me to go back to important changes and reverse mistakes.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git allows you to change multiple text files in one commit.  It makes sense because the multiple text files are inter-related.  Google docs allows you to change one file at a time.  It makes sense because one document is separate from the other documents.

How can you use the commands git log and git diff to view the history of files?

git log allows you to see a list of logical changes.  git diff allows you to see the exact changes that happen between two files.

How might using version control make you more confident to make changes that could break something?

If you make a change that breaks the code, just go back to the previous version.

Now that you have your workspace set up, what do you want to try using Git for?

I'd just like to know how to do basic things with git.

Commands:
---------

q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!